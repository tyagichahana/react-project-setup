{"ast":null,"code":"import _defineProperty from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chahanatyagi/Work/cm-frontend/src/pages/PushNotification/step4.js\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport connectComponent from '@/connect';\nimport WrapComponents from '@/components/wrapper';\nimport { ColoredButtons, TransparentButtons } from '@/components/button';\nimport { SmallHeading } from '@/components/headings';\nimport { Radio } from '@/components/radio';\nimport Stepper from '@/components/stepper';\nimport Loader from '@/components/loader';\nimport Alert from '@/components/alert';\nimport history from '@/utils/history';\nimport { getParentDetails } from '@/actions/CreateCampaign/PnCampaign';\nimport { UpdateCampaignBulk } from '@/actions/CreateCampaign/PnCampaign';\nimport { UploadContent } from '@/actions/utils';\nimport './index.scss';\n\nvar StepFour =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StepFour, _Component);\n\n  function StepFour() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StepFour);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StepFour)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      parentID: '',\n      steps: ['Channel', 'Message', 'Scheduling', 'Segmentation', 'Overview'],\n      uploadCsv: true,\n      fileUploaded: false,\n      error: false,\n      usersCount: 0,\n      userFilePath: ''\n    };\n\n    _this.componentWillMount = function () {\n      var parent_id = _this.props.match.params.parent_id;\n      parent_id = parseInt(parent_id, 10);\n\n      _this.setState({\n        parentID: parent_id\n      });\n\n      if (!_this.props.CreateCampaign.data) {\n        getParentDetails(parent_id);\n      }\n    };\n\n    _this.handleFileChange =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var files, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                files = e.target.files;\n\n                if (!files.length) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return UploadContent(files[0], 'user_segment');\n\n              case 4:\n                res = _context.sent;\n                console.log(res, 'response of 4th step in pn');\n\n                if (res) {\n                  _this.setState({\n                    fileUploaded: true,\n                    usersCount: res.usersCount,\n                    userFilePath: response.s3url\n                  }); // const { data } = this.props.CreateCampaign\n                  // if (_.isArray(data)) {\n                  //     _.forEach(data, part => {\n                  //         requests.push(\n                  //             AddUser({\n                  //                 segment_id: res.id,\n                  //                 campaignId: part.campaignId || part.campaignId,\n                  //             })\n                  //         )\n                  //     })\n                  // }\n                  // const adduser = await Promise.all(requests)\n                  // console.log('adduser in pn', adduser[0])\n\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(StepFour, [{\n    key: \"handleInputFields\",\n    value: function handleInputFields(key, value) {\n      if (!value) {\n        this.setState(_defineProperty({}, key, value));\n      } else {\n        this.setState(_defineProperty({}, key, value));\n      }\n    }\n  }, {\n    key: \"handleContinue\",\n    value: function handleContinue() {\n      var anyError = false;\n      var data = this.props.CreateCampaign.data;\n      var _this$state = this.state,\n          fileUploaded = _this$state.fileUploaded,\n          parentID = _this$state.parentID,\n          userFilePath = _this$state.userFilePath;\n\n      if (!fileUploaded) {\n        this.setState({\n          error: true\n        });\n        anyError = true;\n      }\n\n      if (!anyError) {\n        var requests = [];\n        var next = \"/push-notification/step-5/\".concat(parentID);\n\n        if (_.isArray(data)) {\n          _.forEach(data, function (part) {\n            requests.push({\n              parentID: parentID,\n              userFilePath: userFilePath,\n              campaignId: part.campaignId || part.campaignId\n            });\n          });\n        }\n\n        UpdateCampaignBulk(requests, next); // history.push(`/push-notification/step-5/${parentID}`)\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          steps = _this$state2.steps,\n          uploadCsv = _this$state2.uploadCsv,\n          fileUploaded = _this$state2.fileUploaded,\n          error = _this$state2.error,\n          usersCount = _this$state2.usersCount;\n      var CreateCampaign = this.props.CreateCampaign;\n\n      if (CreateCampaign.loading) {\n        return React.createElement(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(WrapComponents, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Stepper, {\n        steps: steps,\n        activeStep: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), error && React.createElement(Alert, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Error: Please add users for Campaign\"), CreateCampaign.error && React.createElement(Alert, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Error: \", CreateCampaign.error), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(SmallHeading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Target Audience\"), React.createElement(Radio, {\n        checked: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Upload CSV\"), uploadCsv && React.createElement(\"div\", {\n        className: \"section mrgn-top-15\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"upload-file-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(SmallHeading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Upload CSV file\"), React.createElement(\"label\", {\n        htmlFor: \"uploadFile\",\n        className: \"upload-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        id: \"uploadFile\",\n        onChange: this.handleFileChange,\n        accept: \".csv\",\n        className: \"upload-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }))), fileUploaded && React.createElement(React.Fragment, null, React.createElement(Alert, {\n        className: \"success mrgn-top-15\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"File has been uploaded successfully\"), React.createElement(SmallHeading, {\n        className: \"success mrgn-top-15\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Number of users in files : \", usersCount)))), React.createElement(ColoredButtons, {\n        className: \"float\",\n        onClick: function onClick() {\n          _this2.handleContinue();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Continue\"), React.createElement(TransparentButtons, {\n        onClick: function onClick() {\n          return _this2.props.history.goBack();\n        },\n        className: \"float grey-border\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Go Back\"))));\n    }\n  }]);\n\n  return StepFour;\n}(Component);\n\nexport default connectComponent(StepFour);","map":{"version":3,"sources":["/Users/chahanatyagi/Work/cm-frontend/src/pages/PushNotification/step4.js"],"names":["React","Component","_","connectComponent","WrapComponents","ColoredButtons","TransparentButtons","SmallHeading","Radio","Stepper","Loader","Alert","history","getParentDetails","UpdateCampaignBulk","UploadContent","StepFour","state","parentID","steps","uploadCsv","fileUploaded","error","usersCount","userFilePath","componentWillMount","parent_id","props","match","params","parseInt","setState","CreateCampaign","data","handleFileChange","e","files","target","length","res","console","log","response","s3url","key","value","anyError","requests","next","isArray","forEach","part","push","campaignId","loading","handleContinue","goBack"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport _ from 'lodash'\nimport connectComponent from '@/connect'\nimport WrapComponents from '@/components/wrapper'\nimport { ColoredButtons, TransparentButtons } from '@/components/button'\nimport { SmallHeading } from '@/components/headings'\nimport { Radio } from '@/components/radio'\nimport Stepper from '@/components/stepper'\nimport Loader from '@/components/loader'\nimport Alert from '@/components/alert'\nimport history from '@/utils/history'\nimport { getParentDetails } from '@/actions/CreateCampaign/PnCampaign'\nimport { UpdateCampaignBulk } from '@/actions/CreateCampaign/PnCampaign'\nimport { UploadContent } from '@/actions/utils'\nimport './index.scss'\n\nclass StepFour extends Component {\n    state = {\n        parentID: '',\n        steps: ['Channel', 'Message', 'Scheduling', 'Segmentation', 'Overview'],\n        uploadCsv: true,\n        fileUploaded: false,\n        error: false,\n        usersCount: 0,\n        userFilePath: '',\n    }\n\n    componentWillMount = () => {\n        let {\n            params: { parent_id },\n        } = this.props.match\n        parent_id = parseInt(parent_id, 10)\n        this.setState({\n            parentID: parent_id,\n        })\n        if (!this.props.CreateCampaign.data) {\n            getParentDetails(parent_id)\n        }\n    }\n\n    handleInputFields(key, value) {\n        if (!value) {\n            this.setState({\n                [key]: value,\n            })\n        } else {\n            this.setState({\n                [key]: value,\n            })\n        }\n    }\n\n    handleFileChange = async e => {\n        const { files } = e.target\n        if (files.length) {\n            const res = await UploadContent(files[0], 'user_segment')\n            console.log(res, 'response of 4th step in pn')\n            if (res) {\n                this.setState({\n                    fileUploaded: true,\n                    usersCount: res.usersCount,\n                    userFilePath: response.s3url,\n                })\n                // const { data } = this.props.CreateCampaign\n\n                // if (_.isArray(data)) {\n                //     _.forEach(data, part => {\n                //         requests.push(\n                //             AddUser({\n                //                 segment_id: res.id,\n                //                 campaignId: part.campaignId || part.campaignId,\n                //             })\n                //         )\n                //     })\n                // }\n                // const adduser = await Promise.all(requests)\n                // console.log('adduser in pn', adduser[0])\n            }\n        }\n    }\n\n    handleContinue() {\n        let anyError = false\n        const { data } = this.props.CreateCampaign\n        const { fileUploaded, parentID, userFilePath } = this.state\n        if (!fileUploaded) {\n            this.setState({\n                error: true,\n            })\n            anyError = true\n        }\n        if (!anyError) {\n            const requests = []\n            const next = `/push-notification/step-5/${parentID}`\n            if (_.isArray(data)) {\n                _.forEach(data, part => {\n                    requests.push({\n                        parentID,\n                        userFilePath,\n                        campaignId: part.campaignId || part.campaignId,\n                    })\n                })\n            }\n            UpdateCampaignBulk(requests, next)\n\n            // history.push(`/push-notification/step-5/${parentID}`)\n        }\n    }\n\n    render() {\n        const { steps, uploadCsv, fileUploaded, error, usersCount } = this.state\n        const { CreateCampaign } = this.props\n        if (CreateCampaign.loading) {\n            return <Loader />\n        }\n\n        return (\n            <WrapComponents>\n                <Stepper steps={steps} activeStep={3} />\n                {error && <Alert>Error: Please add users for Campaign</Alert>}\n                {CreateCampaign.error && <Alert>Error: {CreateCampaign.error}</Alert>}\n                <div>\n                    <div className=\"section-left\">\n                        <div className=\"section \">\n                            <SmallHeading>Target Audience</SmallHeading>\n                            {/* <Radio>All users</Radio>\n                            <Radio>Saved Segments</Radio> */}\n                            <Radio checked={true}>Upload CSV</Radio>\n                            {uploadCsv && (\n                                <div className=\"section mrgn-top-15\">\n                                    <div className=\"upload-file-section\">\n                                        <SmallHeading>Upload CSV file</SmallHeading>\n                                        <label htmlFor=\"uploadFile\" className=\"upload-box\">\n                                            <input\n                                                type=\"file\"\n                                                id=\"uploadFile\"\n                                                onChange={this.handleFileChange}\n                                                accept=\".csv\"\n                                                className=\"upload-file\"\n                                            />\n                                        </label>\n                                    </div>\n                                    {fileUploaded && (\n                                        <>\n                                            <Alert className=\"success mrgn-top-15\">\n                                                File has been uploaded successfully\n                                            </Alert>\n                                            <SmallHeading className=\"success mrgn-top-15\">\n                                                Number of users in files : {usersCount}\n                                            </SmallHeading>\n                                        </>\n                                    )}\n                                </div>\n                            )}\n                        </div>\n                        <ColoredButtons\n                            className=\"float\"\n                            onClick={() => {\n                                this.handleContinue()\n                            }}\n                        >\n                            Continue\n                        </ColoredButtons>\n                        <TransparentButtons\n                            onClick={() => this.props.history.goBack()}\n                            className=\"float grey-border\"\n                        >\n                            Go Back\n                        </TransparentButtons>\n                    </div>\n                </div>\n            </WrapComponents>\n        )\n    }\n}\n\nexport default connectComponent(StepFour)\n"]},"metadata":{},"sourceType":"module"}