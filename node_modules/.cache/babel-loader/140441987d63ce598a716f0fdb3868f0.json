{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar _regeneratorRuntime = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _defineProperty = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar gaxios_1 = require(\"gaxios\");\n\nvar jsonBigint = require('json-bigint');\n\nexports.HOST_ADDRESS = 'http://metadata.google.internal';\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.BASE_URL = exports.HOST_ADDRESS + exports.BASE_PATH;\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze(_defineProperty({}, exports.HEADER_NAME, exports.HEADER_VALUE)); // Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\n\nfunction validate(options) {\n  Object.keys(options).forEach(function (key) {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n\n      default:\n        throw new Error(\"'\".concat(key, \"' is not a valid configuration option.\"));\n    }\n  });\n}\n\nfunction metadataAccessor(type, options) {\n  var noResponseRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var property, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = options || {};\n\n            if (typeof options === 'string') {\n              options = {\n                property: options\n              };\n            }\n\n            property = '';\n\n            if (typeof options === 'object' && options.property) {\n              property = '/' + options.property;\n            }\n\n            validate(options);\n            _context.prev = 5;\n            _context.next = 8;\n            return gaxios_1.request({\n              url: \"\".concat(exports.BASE_URL, \"/\").concat(type).concat(property),\n              headers: Object.assign({}, exports.HEADERS, options.headers),\n              retryConfig: {\n                noResponseRetries: noResponseRetries\n              },\n              params: options.params\n            });\n\n          case 8:\n            res = _context.sent;\n\n            if (!(res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE)) {\n              _context.next = 13;\n              break;\n            }\n\n            throw new Error(\"Invalid response from metadata service: incorrect \".concat(exports.HEADER_NAME, \" header.\"));\n\n          case 13:\n            if (res.data) {\n              _context.next = 15;\n              break;\n            }\n\n            throw new Error('Invalid response from the metadata service');\n\n          case 15:\n            if (!(typeof res.data === 'string')) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.prev = 16;\n            return _context.abrupt(\"return\", jsonBigint.parse(res.data));\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](16);\n\n          case 22:\n            return _context.abrupt(\"return\", res.data);\n\n          case 25:\n            _context.prev = 25;\n            _context.t1 = _context[\"catch\"](5);\n\n            if (_context.t1.response && _context.t1.response.status !== 200) {\n              _context.t1.message = \"Unsuccessful response status code. \".concat(_context.t1.message);\n            }\n\n            throw _context.t1;\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[5, 25], [16, 20]]);\n  }));\n} // tslint:disable-next-line no-any\n\n\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n\nexports.instance = instance; // tslint:disable-next-line no-any\n\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n\nexports.project = project;\n/**\n * Determine if the metadata server is currently available.\n */\n\nfunction isAvailable() {\n  return __awaiter(this, void 0, void 0,\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return metadataAccessor('instance', undefined, 0);\n\n          case 3:\n            return _context2.abrupt(\"return\", true);\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n\n            if (!(_context2.t0.code && (_context2.t0.code === 'ENOTFOUND' || _context2.t0.code === 'ENOENT'))) {\n              _context2.next = 10;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 10:\n            throw _context2.t0;\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[0, 6]]);\n  }));\n}\n\nexports.isAvailable = isAvailable;","map":null,"metadata":{},"sourceType":"script"}