{"ast":null,"code":"import _classCallCheck from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chahanatyagi/Work/cm-frontend/src/components/TextWithEmoji/index.js\";\nimport React, { Component } from 'react';\nimport 'emoji-mart/css/emoji-mart.css';\nimport { Picker } from 'emoji-mart';\n\nvar EmojiWithText =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EmojiWithText, _Component);\n\n  function EmojiWithText() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EmojiWithText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EmojiWithText)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      text: ''\n    };\n\n    _this.handleChange = function (e) {\n      _this.props.text = e.target.value;\n    };\n\n    _this.addEmoji = function (e) {\n      //console.log(e.unified)\n      if (e.unified.length <= 5) {\n        var emojiPic = String.fromCodePoint(\"0x\".concat(e.unified));\n\n        _this.setState({\n          text: _this.state.text + emojiPic\n        });\n      } else {\n        var sym = e.unified.split('-');\n        var codesArray = [];\n        sym.forEach(function (el) {\n          return codesArray.push('0x' + el);\n        }); //console.log(codesArray.length)\n        //console.log(codesArray)  // [\"0x1f3f3\", \"0xfe0f\"]\n\n        var _emojiPic = String.fromCodePoint.apply(String, codesArray);\n\n        _this.setState({\n          text: _this.state.text + _emojiPic\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(EmojiWithText, [{\n    key: \"render\",\n    value: function render() {\n      var text = this.props.text;\n      return React.createElement(\"div\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        value: text,\n        onChange: this.handleChange,\n        placeholder: \"Type a message here then hit ENTER\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        style: {\n          position: 'absolute',\n          width: '250px',\n          height: '250px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Picker, {\n        onSelect: this.addEmoji,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return EmojiWithText;\n}(Component);\n\nexport default EmojiWithText;","map":{"version":3,"sources":["/Users/chahanatyagi/Work/cm-frontend/src/components/TextWithEmoji/index.js"],"names":["React","Component","Picker","EmojiWithText","state","text","handleChange","e","props","target","value","addEmoji","unified","length","emojiPic","String","fromCodePoint","setState","sym","split","codesArray","forEach","el","push","position","width","height"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,+BAAP;AACA,SAASC,MAAT,QAAuB,YAAvB;;IAEMC,a;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,IAAI,EAAE;AADF,K;;UAGRC,Y,GAAe,UAAAC,CAAC,EAAI;AAChB,YAAKC,KAAL,CAAWH,IAAX,GAAkBE,CAAC,CAACE,MAAF,CAASC,KAA3B;AACH,K;;UACDC,Q,GAAW,UAAAJ,CAAC,EAAI;AACZ;AACA,UAAIA,CAAC,CAACK,OAAF,CAAUC,MAAV,IAAoB,CAAxB,EAA2B;AACvB,YAAIC,QAAQ,GAAGC,MAAM,CAACC,aAAP,aAA0BT,CAAC,CAACK,OAA5B,EAAf;;AACA,cAAKK,QAAL,CAAc;AACVZ,UAAAA,IAAI,EAAE,MAAKD,KAAL,CAAWC,IAAX,GAAkBS;AADd,SAAd;AAGH,OALD,MAKO;AACH,YAAII,GAAG,GAAGX,CAAC,CAACK,OAAF,CAAUO,KAAV,CAAgB,GAAhB,CAAV;AACA,YAAIC,UAAU,GAAG,EAAjB;AACAF,QAAAA,GAAG,CAACG,OAAJ,CAAY,UAAAC,EAAE;AAAA,iBAAIF,UAAU,CAACG,IAAX,CAAgB,OAAOD,EAAvB,CAAJ;AAAA,SAAd,EAHG,CAIH;AACA;;AACA,YAAIR,SAAQ,GAAGC,MAAM,CAACC,aAAP,OAAAD,MAAM,EAAkBK,UAAlB,CAArB;;AACA,cAAKH,QAAL,CAAc;AACVZ,UAAAA,IAAI,EAAE,MAAKD,KAAL,CAAWC,IAAX,GAAkBS;AADd,SAAd;AAGH;AACJ,K;;;;;;;6BAEQ;AAAA,UACGT,IADH,GACY,KAAKG,KADjB,CACGH,IADH;AAEL,aACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,KAAK,EAAEA,IAFX;AAGI,QAAA,QAAQ,EAAE,KAAKC,YAHnB;AAII,QAAA,WAAW,EAAC,oCAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAOI;AAAM,QAAA,KAAK,EAAE;AAAEkB,UAAAA,QAAQ,EAAE,UAAZ;AAAwBC,UAAAA,KAAK,EAAE,OAA/B;AAAwCC,UAAAA,MAAM,EAAE;AAAhD,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,KAAKf,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAPJ,CADJ;AAaH;;;;EA1CuBV,S;;AA6C5B,eAAeE,aAAf","sourcesContent":["import React, { Component } from 'react'\nimport 'emoji-mart/css/emoji-mart.css'\nimport { Picker } from 'emoji-mart'\n\nclass EmojiWithText extends Component {\n    state = {\n        text: '',\n    }\n    handleChange = e => {\n        this.props.text = e.target.value\n    }\n    addEmoji = e => {\n        //console.log(e.unified)\n        if (e.unified.length <= 5) {\n            let emojiPic = String.fromCodePoint(`0x${e.unified}`)\n            this.setState({\n                text: this.state.text + emojiPic,\n            })\n        } else {\n            let sym = e.unified.split('-')\n            let codesArray = []\n            sym.forEach(el => codesArray.push('0x' + el))\n            //console.log(codesArray.length)\n            //console.log(codesArray)  // [\"0x1f3f3\", \"0xfe0f\"]\n            let emojiPic = String.fromCodePoint(...codesArray)\n            this.setState({\n                text: this.state.text + emojiPic,\n            })\n        }\n    }\n\n    render() {\n        const { text } = this.props\n        return (\n            <div className=\"section\">\n                <input\n                    type=\"text\"\n                    value={text}\n                    onChange={this.handleChange}\n                    placeholder=\"Type a message here then hit ENTER\"\n                />\n                <span style={{ position: 'absolute', width: '250px', height: '250px' }}>\n                    <Picker onSelect={this.addEmoji} />\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default EmojiWithText\n"]},"metadata":{},"sourceType":"module"}