{"ast":null,"code":"import _defineProperty from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chahanatyagi/Work/cm-frontend/src/pages/SMSCampaign/Components/steps/step4.js\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport history from '@/utils/history';\nimport ConnectComponent from '@/connect';\nimport Stepper from '@/components/stepper';\nimport { Radio } from '@/components/radio';\nimport { SmallHeading } from '@/components/headings';\nimport Alert from '@/components/alert';\nimport Loader from '@/components/loader';\nimport CreateSegementation from '../../../Segmentation/createSegment';\nimport { ColoredButtons, TransparentButtons } from '@/components/button';\nimport WrapComponents from '@/components/wrapper';\nimport { UploadContent, GetCampaign, UpdateCampaignData } from '@/actions/CreateCampaign/emailCampaign';\nimport CSVIcon from \"@/assets/images/csv-icon.svg\";\n\nvar StepFour =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StepFour, _Component);\n\n  function StepFour() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StepFour);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StepFour)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      campaignId: '',\n      userFilePath: '',\n      steps: ['Channel', 'Message', 'Scheduling', 'Segmentation', 'Overview & Send'],\n      uploadCsv: true,\n      createSegment: false,\n      fileUploaded: false,\n      error: false,\n      targetUsers: 0,\n      errorMessage: ''\n    };\n\n    _this.handleFileChange =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var files, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                files = e.target.files;\n\n                if (!files.length) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return UploadContent(files[0], 'user_segment');\n\n              case 4:\n                response = _context.sent;\n\n                if (response) {\n                  _this.setState({\n                    fileUploaded: true,\n                    userFilePath: response.s3url,\n                    targetUsers: response.targetUsers\n                  });\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleContinue = function () {\n      var _this$state = _this.state,\n          userFilePath = _this$state.userFilePath,\n          fileUploaded = _this$state.fileUploaded,\n          campaignId = _this$state.campaignId;\n\n      var anyError = false,\n          noUploaded = '* Please upload user file containing user information',\n          // emptyFile = '*Error: file is empty. please upload another file.',\n      uploadedFile = function uploadedFile(errorText) {\n        _this.setState({\n          error: true\n        });\n\n        anyError = true;\n        return errorText;\n      };\n\n      _this.setState({\n        // errorMessage: fileUploaded\n        //     ? !targetUsers\n        //         ? uploadedFile(emptyFile)\n        //         : null\n        //     : uploadedFile(noUploaded),\n        errorMessage: fileUploaded ? null : uploadedFile(noUploaded)\n      });\n\n      if (!anyError) {\n        var data = _this.props.CreateCampaign.data;\n        UpdateCampaignData(_objectSpread({}, _.assign({}, data, {\n          userFilePath: userFilePath\n        }), {\n          next: 'step-5'\n        }));\n        history.push(\"/sms/step-5/\".concat(campaignId));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(StepFour, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var campaignId = this.props.match.params.campaignId;\n      this.setState({\n        campaignId: campaignId\n      });\n      GetCampaign(campaignId);\n    }\n  }, {\n    key: \"handleInputFields\",\n    value: function handleInputFields(key, value) {\n      if (!value) {\n        this.setState(_defineProperty({}, key, value));\n      } else {\n        this.setState(_defineProperty({}, key, value));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          steps = _this$state2.steps,\n          uploadCsv = _this$state2.uploadCsv,\n          fileUploaded = _this$state2.fileUploaded,\n          error = _this$state2.error,\n          targetUsers = _this$state2.targetUsers,\n          errorMessage = _this$state2.errorMessage,\n          createSegment = _this$state2.createSegment;\n      var CreateCampaign = this.props.CreateCampaign;\n\n      if (CreateCampaign.loading) {\n        return React.createElement(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(WrapComponents, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Stepper, {\n        steps: steps,\n        activeStep: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), error && React.createElement(Alert, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, errorMessage), CreateCampaign.error && React.createElement(Alert, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Error: \", CreateCampaign.error), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(SmallHeading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Target Audience\"), React.createElement(Radio, {\n        checked: uploadCsv,\n        onChange: function onChange() {\n          return _this2.setState({\n            uploadCsv: !uploadCsv,\n            createSegment: !createSegment\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Upload CSV\"), React.createElement(Radio, {\n        checked: createSegment,\n        onChange: function onChange() {\n          return _this2.setState({\n            createSegment: !createSegment,\n            uploadCsv: !uploadCsv\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Create Segment\"), createSegment && React.createElement(CreateSegementation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), uploadCsv && React.createElement(\"div\", {\n        className: \"section mrgn-top-15\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"upload-file-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(SmallHeading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Upload CSV file\"), React.createElement(\"label\", {\n        htmlFor: \"uploadFile\",\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        id: \"uploadFile\",\n        onChange: this.handleFileChange,\n        accept: \".csv\",\n        className: \"upload-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }))), fileUploaded && React.createElement(React.Fragment, null, React.createElement(Alert, {\n        className: \"success mrgn-top-15\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Number of users in files : \", targetUsers), React.createElement(SmallHeading, {\n        className: \"success mrgn-top-15\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, targetUsers, \" Users added\")), React.createElement(\"div\", {\n        className: \"file-uploaded\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"file-icon\",\n        src: CSVIcon,\n        alt: \"csv icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"filename.csv\")))), React.createElement(ColoredButtons, {\n        onClick: this.handleContinue,\n        className: \"float\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Continue\"), React.createElement(TransparentButtons, {\n        onClick: function onClick() {\n          return _this2.props.history.goBack();\n        },\n        className: \"float grey-border\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Go Back\")), CreateCampaign.error && React.createElement(\"div\", {\n        className: \"alert\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, CreateCampaign.error)));\n    }\n  }]);\n\n  return StepFour;\n}(Component);\n\nexport default ConnectComponent(StepFour);","map":{"version":3,"sources":["/Users/chahanatyagi/Work/cm-frontend/src/pages/SMSCampaign/Components/steps/step4.js"],"names":["React","Component","_","history","ConnectComponent","Stepper","Radio","SmallHeading","Alert","Loader","CreateSegementation","ColoredButtons","TransparentButtons","WrapComponents","UploadContent","GetCampaign","UpdateCampaignData","StepFour","state","campaignId","userFilePath","steps","uploadCsv","createSegment","fileUploaded","error","targetUsers","errorMessage","handleFileChange","e","files","target","length","response","setState","s3url","handleContinue","anyError","noUploaded","uploadedFile","errorText","data","props","CreateCampaign","assign","next","push","match","params","key","value","loading","CSVIcon","goBack"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport _ from 'lodash'\nimport history from '@/utils/history'\nimport ConnectComponent from '@/connect'\nimport Stepper from '@/components/stepper'\nimport { Radio } from '@/components/radio'\nimport { SmallHeading } from '@/components/headings'\nimport Alert from '@/components/alert'\nimport Loader from '@/components/loader'\nimport CreateSegementation from '../../../Segmentation/createSegment'\nimport { ColoredButtons, TransparentButtons } from '@/components/button'\nimport WrapComponents from '@/components/wrapper'\nimport {\n    UploadContent,\n    GetCampaign,\n    UpdateCampaignData,\n} from '@/actions/CreateCampaign/emailCampaign'\nimport CSVIcon from '@/assets/images/csv-icon.svg'\n\nclass StepFour extends Component {\n    state = {\n        campaignId: '',\n        userFilePath: '',\n        steps: ['Channel', 'Message', 'Scheduling', 'Segmentation', 'Overview & Send'],\n        uploadCsv: true,\n        createSegment: false,\n        fileUploaded: false,\n        error: false,\n        targetUsers: 0,\n        errorMessage: '',\n    }\n\n    componentWillMount() {\n        const {\n            params: { campaignId },\n        } = this.props.match\n        this.setState({\n            campaignId,\n        })\n        GetCampaign(campaignId)\n    }\n\n    handleInputFields(key, value) {\n        if (!value) {\n            this.setState({\n                [key]: value,\n            })\n        } else {\n            this.setState({\n                [key]: value,\n            })\n        }\n    }\n\n    handleFileChange = async e => {\n        const { files } = e.target\n        if (files.length) {\n            const response = await UploadContent(files[0], 'user_segment')\n            if (response) {\n                this.setState({\n                    fileUploaded: true,\n                    userFilePath: response.s3url,\n                    targetUsers: response.targetUsers,\n                })\n            }\n        }\n    }\n\n    handleContinue = () => {\n        const { userFilePath, fileUploaded, campaignId } = this.state\n        let anyError = false,\n            noUploaded = '* Please upload user file containing user information',\n            // emptyFile = '*Error: file is empty. please upload another file.',\n            uploadedFile = errorText => {\n                this.setState({\n                    error: true,\n                })\n                anyError = true\n                return errorText\n            }\n        this.setState({\n            // errorMessage: fileUploaded\n            //     ? !targetUsers\n            //         ? uploadedFile(emptyFile)\n            //         : null\n            //     : uploadedFile(noUploaded),\n            errorMessage: fileUploaded ? null : uploadedFile(noUploaded),\n        })\n        if (!anyError) {\n            const { data } = this.props.CreateCampaign\n            UpdateCampaignData({\n                ..._.assign({}, data, { userFilePath }),\n                next: 'step-5',\n            })\n            history.push(`/sms/step-5/${campaignId}`)\n        }\n    }\n\n    render() {\n        const {\n            steps,\n            uploadCsv,\n            fileUploaded,\n            error,\n            targetUsers,\n            errorMessage,\n            createSegment,\n        } = this.state\n        const { CreateCampaign } = this.props\n        if (CreateCampaign.loading) {\n            return <Loader />\n        }\n\n        return (\n            <WrapComponents>\n                <Stepper steps={steps} activeStep={3} />\n                {error && <Alert>{errorMessage}</Alert>}\n                {CreateCampaign.error && <Alert>Error: {CreateCampaign.error}</Alert>}\n                <div>\n                    <div className=\"section-left\">\n                        <div className=\"section \">\n                            <SmallHeading>Target Audience</SmallHeading>\n                            <Radio\n                                checked={uploadCsv}\n                                onChange={() =>\n                                    this.setState({\n                                        uploadCsv: !uploadCsv,\n                                        createSegment: !createSegment,\n                                    })\n                                }\n                            >\n                                Upload CSV\n                            </Radio>\n                            <Radio\n                                checked={createSegment}\n                                onChange={() =>\n                                    this.setState({\n                                        createSegment: !createSegment,\n                                        uploadCsv: !uploadCsv,\n                                    })\n                                }\n                            >\n                                Create Segment\n                            </Radio>\n                            {createSegment && <CreateSegementation />}\n\n                            {uploadCsv && (\n                                <div className=\"section mrgn-top-15\">\n                                    <div className=\"upload-file-section\">\n                                        <SmallHeading>Upload CSV file</SmallHeading>\n                                        <label htmlFor=\"uploadFile\" className=\"\">\n                                            <input\n                                                type=\"file\"\n                                                id=\"uploadFile\"\n                                                onChange={this.handleFileChange}\n                                                accept=\".csv\"\n                                                className=\"upload-file\"\n                                            />\n                                        </label>\n                                    </div>\n                                    {fileUploaded && (\n                                        <>\n                                            <Alert className=\"success mrgn-top-15\">\n                                                Number of users in files : {targetUsers}\n                                            </Alert>\n                                            <SmallHeading className=\"success mrgn-top-15\">\n                                                {targetUsers} Users added\n                                            </SmallHeading>\n                                        </>\n                                    )}\n                                    <div className=\"file-uploaded\">\n                                        <img className=\"file-icon\" src={CSVIcon} alt=\"csv icon\" />\n                                        <div>filename.csv</div>\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                        <ColoredButtons onClick={this.handleContinue} className=\"float\">\n                            Continue\n                        </ColoredButtons>\n                        <TransparentButtons\n                            onClick={() => this.props.history.goBack()}\n                            className=\"float grey-border\"\n                        >\n                            Go Back\n                        </TransparentButtons>\n                    </div>\n                    {CreateCampaign.error && <div className=\"alert\">{CreateCampaign.error}</div>}\n                </div>\n            </WrapComponents>\n        )\n    }\n}\nexport default ConnectComponent(StepFour)\n"]},"metadata":{},"sourceType":"module"}