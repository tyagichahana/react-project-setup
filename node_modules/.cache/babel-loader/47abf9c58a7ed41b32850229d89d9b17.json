{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crypto = require(\"crypto\");\n\nvar NodeCrypto =\n/*#__PURE__*/\nfunction () {\n  function NodeCrypto() {\n    _classCallCheck(this, NodeCrypto);\n  }\n\n  _createClass(NodeCrypto, [{\n    key: \"sha256DigestBase64\",\n    value: function sha256DigestBase64(str) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", crypto.createHash('sha256').update(str).digest('base64'));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"randomBytesBase64\",\n    value: function randomBytesBase64(count) {\n      return crypto.randomBytes(count).toString('base64');\n    }\n  }, {\n    key: \"verify\",\n    value: function verify(pubkey, data, signature) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var verifier;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                verifier = crypto.createVerify('sha256');\n                verifier.update(data);\n                return _context2.abrupt(\"return\", verifier.verify(pubkey, signature, 'base64'));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"createSign\",\n    value: function createSign(algorithm) {\n      return crypto.createSign(algorithm);\n    }\n  }, {\n    key: \"decodeBase64StringUtf8\",\n    value: function decodeBase64StringUtf8(base64) {\n      return Buffer.from(base64, 'base64').toString('utf-8');\n    }\n  }, {\n    key: \"encodeBase64StringUtf8\",\n    value: function encodeBase64StringUtf8(text) {\n      return Buffer.from(text, 'utf-8').toString('base64');\n    }\n  }]);\n\n  return NodeCrypto;\n}();\n\nexports.NodeCrypto = NodeCrypto;","map":null,"metadata":{},"sourceType":"script"}