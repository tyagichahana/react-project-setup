{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.CodeGenerator = void 0;\n\nvar _sourceMap = _interopRequireDefault(require(\"./source-map\"));\n\nvar _printer = _interopRequireDefault(require(\"./printer\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Generator =\n/*#__PURE__*/\nfunction (_printer$default) {\n  _inherits(Generator, _printer$default);\n\n  function Generator(ast) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var code = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Generator);\n\n    var format = normalizeOptions(code, opts);\n    var map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Generator).call(this, format, map));\n    _this.ast = ast;\n    return _this;\n  }\n\n  _createClass(Generator, [{\n    key: \"generate\",\n    value: function generate() {\n      return _get(_getPrototypeOf(Generator.prototype), \"generate\", this).call(this, this.ast);\n    }\n  }]);\n\n  return Generator;\n}(_printer.default);\n\nfunction normalizeOptions(code, opts) {\n  var format = {\n    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n    shouldPrintComment: opts.shouldPrintComment,\n    retainLines: opts.retainLines,\n    retainFunctionParens: opts.retainFunctionParens,\n    comments: opts.comments == null || opts.comments,\n    compact: opts.compact,\n    minified: opts.minified,\n    concise: opts.concise,\n    jsonCompatibleStrings: opts.jsonCompatibleStrings,\n    indent: {\n      adjustMultilineComment: true,\n      style: \"  \",\n      base: 0\n    },\n    decoratorsBeforeExport: !!opts.decoratorsBeforeExport,\n    jsescOption: Object.assign({\n      quotes: \"double\",\n      wrap: true\n    }, opts.jsescOption)\n  };\n\n  if (format.minified) {\n    format.compact = true;\n\n    format.shouldPrintComment = format.shouldPrintComment || function () {\n      return format.comments;\n    };\n  } else {\n    format.shouldPrintComment = format.shouldPrintComment || function (value) {\n      return format.comments || value.indexOf(\"@license\") >= 0 || value.indexOf(\"@preserve\") >= 0;\n    };\n  }\n\n  if (format.compact === \"auto\") {\n    format.compact = code.length > 500000;\n\n    if (format.compact) {\n      console.error(\"[BABEL] Note: The code generator has deoptimised the styling of \" + \"\".concat(opts.filename, \" as it exceeds the max of \", \"500KB\", \".\"));\n    }\n  }\n\n  if (format.compact) {\n    format.indent.adjustMultilineComment = false;\n  }\n\n  return format;\n}\n\nvar CodeGenerator =\n/*#__PURE__*/\nfunction () {\n  function CodeGenerator(ast, opts, code) {\n    _classCallCheck(this, CodeGenerator);\n\n    this._generator = new Generator(ast, opts, code);\n  }\n\n  _createClass(CodeGenerator, [{\n    key: \"generate\",\n    value: function generate() {\n      return this._generator.generate();\n    }\n  }]);\n\n  return CodeGenerator;\n}();\n\nexports.CodeGenerator = CodeGenerator;\n\nfunction _default(ast, opts, code) {\n  var gen = new Generator(ast, opts, code);\n  return gen.generate();\n}","map":null,"metadata":{},"sourceType":"script"}