{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\n\nvar base64js = require(\"base64-js\"); // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n\n\nif (typeof TextEncoder === 'undefined') {\n  require('fast-text-encoding');\n}\n\nvar BrowserCrypto =\n/*#__PURE__*/\nfunction () {\n  function BrowserCrypto() {\n    _classCallCheck(this, BrowserCrypto);\n\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error('SubtleCrypto not found. Make sure it\\'s an https:// website.');\n    }\n  }\n\n  _createClass(BrowserCrypto, [{\n    key: \"sha256DigestBase64\",\n    value: function sha256DigestBase64(str) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var inputBuffer, outputBuffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // SubtleCrypto digest() method is async, so we must make\n                // this method async as well.\n                // To calculate SHA256 digest using SubtleCrypto, we first\n                // need to convert an input string to an ArrayBuffer:\n                inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n                _context.next = 3;\n                return window.crypto.subtle.digest('SHA-256', inputBuffer);\n\n              case 3:\n                outputBuffer = _context.sent;\n                return _context.abrupt(\"return\", base64js.fromByteArray(new Uint8Array(outputBuffer)));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"randomBytesBase64\",\n    value: function randomBytesBase64(count) {\n      var array = new Uint8Array(count);\n      window.crypto.getRandomValues(array);\n      return base64js.fromByteArray(array);\n    }\n  }, {\n    key: \"verify\",\n    value: function verify(pubkey, data, signature) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var algo, dataArray, signatureArray, cryptoKey, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                algo = {\n                  name: 'RSASSA-PKCS1-v1_5',\n                  hash: {\n                    name: 'SHA-256'\n                  }\n                };\n                dataArray = new TextEncoder().encode(data); // base64js requires padding, so let's add some '='\n\n                while (signature.length % 4 !== 0) {\n                  signature += '=';\n                }\n\n                signatureArray = base64js.toByteArray(signature);\n                _context2.next = 6;\n                return window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n\n              case 6:\n                cryptoKey = _context2.sent;\n                _context2.next = 9;\n                return window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n\n              case 9:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"createSign\",\n    value: function createSign(algorithm) {\n      throw new Error('createSign is not implemented in BrowserCrypto');\n    }\n  }, {\n    key: \"decodeBase64StringUtf8\",\n    value: function decodeBase64StringUtf8(base64) {\n      var uint8array = base64js.toByteArray(base64);\n      var result = new TextDecoder().decode(uint8array);\n      return result;\n    }\n  }, {\n    key: \"encodeBase64StringUtf8\",\n    value: function encodeBase64StringUtf8(text) {\n      var uint8array = new TextEncoder().encode(text);\n      var result = base64js.fromByteArray(uint8array);\n      return result;\n    }\n  }]);\n\n  return BrowserCrypto;\n}();\n\nexports.BrowserCrypto = BrowserCrypto;","map":null,"metadata":{},"sourceType":"script"}