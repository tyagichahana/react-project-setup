{"ast":null,"code":"import _objectSpread from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Component, createElement } from \"react\";\nimport Store from \"./reducer\"; // using createStore of redux\n// hoc\n\nfunction connectWithComponent(WrappedComponent) {\n  return (\n    /*#__PURE__*/\n    function (_Component) {\n      _inherits(_class, _Component);\n\n      function _class(props) {\n        var _this;\n\n        _classCallCheck(this, _class);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, props));\n        _this.state = {\n          data: Store.getState()\n        };\n        _this.store = null;\n\n        _this.initSelector();\n\n        return _this;\n      }\n\n      _createClass(_class, [{\n        key: \"componentWillMount\",\n        value: function componentWillMount() {\n          var _this2 = this;\n\n          this.Store = Store.subscribe(function () {\n            _this2.setState({\n              data: Store.getState()\n            });\n          });\n        }\n      }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n          if (this.store) this.store();\n        }\n      }, {\n        key: \"initSelector\",\n        value: function initSelector() {\n          this.selector = WrappedComponent;\n        }\n      }, {\n        key: \"render\",\n        value: function render() {\n          var props = _objectSpread({}, this.state.data, this.props);\n\n          this.selector.shouldComponentUpdate = false;\n          return createElement(this.selector, props);\n        }\n      }]);\n\n      return _class;\n    }(Component)\n  );\n}\n\nexport default connectWithComponent;","map":{"version":3,"sources":["/Users/chahanatyagi/Work/cm-frontend/src/connect.js"],"names":["Component","createElement","Store","connectWithComponent","WrappedComponent","props","state","data","getState","store","initSelector","subscribe","setState","selector","shouldComponentUpdate"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,aAApB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,WAAlB,C,CAA+B;AAE/B;;AACA,SAASC,oBAAT,CAA8BC,gBAA9B,EAAgD;AAC9C;AAAA;AAAA;AAAA;;AACE,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,oFAAMA,KAAN;AACA,cAAKC,KAAL,GAAa;AACXC,UAAAA,IAAI,EAAEL,KAAK,CAACM,QAAN;AADK,SAAb;AAGA,cAAKC,KAAL,GAAa,IAAb;;AACA,cAAKC,YAAL;;AANiB;AAOlB;;AARH;AAAA;AAAA,6CAUuB;AAAA;;AACnB,eAAKR,KAAL,GAAaA,KAAK,CAACS,SAAN,CAAgB,YAAM;AACjC,YAAA,MAAI,CAACC,QAAL,CAAc;AACZL,cAAAA,IAAI,EAAEL,KAAK,CAACM,QAAN;AADM,aAAd;AAGD,WAJY,CAAb;AAKD;AAhBH;AAAA;AAAA,+CAkByB;AACrB,cAAI,KAAKC,KAAT,EAAgB,KAAKA,KAAL;AACjB;AApBH;AAAA;AAAA,uCAsBiB;AACb,eAAKI,QAAL,GAAgBT,gBAAhB;AACD;AAxBH;AAAA;AAAA,iCA0BW;AACP,cAAMC,KAAK,qBACN,KAAKC,KAAL,CAAWC,IADL,EAEN,KAAKF,KAFC,CAAX;;AAIA,eAAKQ,QAAL,CAAcC,qBAAd,GAAsC,KAAtC;AACA,iBAAOb,aAAa,CAAC,KAAKY,QAAN,EAAgBR,KAAhB,CAApB;AACD;AAjCH;;AAAA;AAAA,MAAqBL,SAArB;AAAA;AAmCD;;AAED,eAAeG,oBAAf","sourcesContent":["import { Component, createElement } from \"react\";\nimport Store from \"./reducer\"; // using createStore of redux\n\n// hoc\nfunction connectWithComponent(WrappedComponent) {\n  return class extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: Store.getState()\n      };\n      this.store = null;\n      this.initSelector();\n    }\n\n    componentWillMount() {\n      this.Store = Store.subscribe(() => {\n        this.setState({\n          data: Store.getState()\n        });\n      });\n    }\n\n    componentWillUnmount() {\n      if (this.store) this.store();\n    }\n\n    initSelector() {\n      this.selector = WrappedComponent;\n    }\n\n    render() {\n      const props = {\n        ...this.state.data,\n        ...this.props\n      };\n      this.selector.shouldComponentUpdate = false;\n      return createElement(this.selector, props);\n    }\n  };\n}\n\nexport default connectWithComponent;\n"]},"metadata":{},"sourceType":"module"}