{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.explode = explode;\nexports.verify = verify;\nexports.merge = merge;\n\nvar virtualTypes = _interopRequireWildcard(require(\"./path/lib/virtual-types\"));\n\nfunction t() {\n  var data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function t() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _clone() {\n  var data = _interopRequireDefault(require(\"lodash/clone\"));\n\n  _clone = function _clone() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction explode(visitor) {\n  if (visitor._exploded) return visitor;\n  visitor._exploded = true;\n\n  for (var nodeType in visitor) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    var parts = nodeType.split(\"|\");\n    if (parts.length === 1) continue;\n    var fns = visitor[nodeType];\n    delete visitor[nodeType];\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var part = _step.value;\n        visitor[part] = fns;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  verify(visitor);\n  delete visitor.__esModule;\n  ensureEntranceObjects(visitor);\n  ensureCallbackArrays(visitor);\n\n  var _arr = Object.keys(visitor);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var _nodeType3 = _arr[_i];\n    if (shouldIgnoreKey(_nodeType3)) continue;\n    var wrapper = virtualTypes[_nodeType3];\n    if (!wrapper) continue;\n    var _fns2 = visitor[_nodeType3];\n\n    for (var type in _fns2) {\n      _fns2[type] = wrapCheck(wrapper, _fns2[type]);\n    }\n\n    delete visitor[_nodeType3];\n\n    if (wrapper.types) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = wrapper.types[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _type = _step3.value;\n\n          if (visitor[_type]) {\n            mergePair(visitor[_type], _fns2);\n          } else {\n            visitor[_type] = _fns2;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    } else {\n      mergePair(visitor, _fns2);\n    }\n  }\n\n  for (var _nodeType in visitor) {\n    if (shouldIgnoreKey(_nodeType)) continue;\n    var _fns = visitor[_nodeType];\n\n    var aliases = t().FLIPPED_ALIAS_KEYS[_nodeType];\n\n    var deprecratedKey = t().DEPRECATED_KEYS[_nodeType];\n\n    if (deprecratedKey) {\n      console.trace(\"Visitor defined for \".concat(_nodeType, \" but it has been renamed to \").concat(deprecratedKey));\n      aliases = [deprecratedKey];\n    }\n\n    if (!aliases) continue;\n    delete visitor[_nodeType];\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = aliases[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var alias = _step2.value;\n        var existing = visitor[alias];\n\n        if (existing) {\n          mergePair(existing, _fns);\n        } else {\n          visitor[alias] = (0, _clone().default)(_fns);\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  for (var _nodeType2 in visitor) {\n    if (shouldIgnoreKey(_nodeType2)) continue;\n    ensureCallbackArrays(visitor[_nodeType2]);\n  }\n\n  return visitor;\n}\n\nfunction verify(visitor) {\n  if (visitor._verified) return;\n\n  if (typeof visitor === \"function\") {\n    throw new Error(\"You passed `traverse()` a function when it expected a visitor object, \" + \"are you sure you didn't mean `{ enter: Function }`?\");\n  }\n\n  for (var nodeType in visitor) {\n    if (nodeType === \"enter\" || nodeType === \"exit\") {\n      validateVisitorMethods(nodeType, visitor[nodeType]);\n    }\n\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    if (t().TYPES.indexOf(nodeType) < 0) {\n      throw new Error(\"You gave us a visitor for the node type \".concat(nodeType, \" but it's not a valid type\"));\n    }\n\n    var visitors = visitor[nodeType];\n\n    if (typeof visitors === \"object\") {\n      for (var visitorKey in visitors) {\n        if (visitorKey === \"enter\" || visitorKey === \"exit\") {\n          validateVisitorMethods(\"\".concat(nodeType, \".\").concat(visitorKey), visitors[visitorKey]);\n        } else {\n          throw new Error(\"You passed `traverse()` a visitor object with the property \" + \"\".concat(nodeType, \" that has the invalid property \").concat(visitorKey));\n        }\n      }\n    }\n  }\n\n  visitor._verified = true;\n}\n\nfunction validateVisitorMethods(path, val) {\n  var fns = [].concat(val);\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = fns[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var fn = _step4.value;\n\n      if (typeof fn !== \"function\") {\n        throw new TypeError(\"Non-function found defined in \".concat(path, \" with type \").concat(typeof fn));\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n}\n\nfunction merge(visitors) {\n  var states = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var wrapper = arguments.length > 2 ? arguments[2] : undefined;\n  var rootVisitor = {};\n\n  for (var i = 0; i < visitors.length; i++) {\n    var visitor = visitors[i];\n    var state = states[i];\n    explode(visitor);\n\n    for (var type in visitor) {\n      var visitorType = visitor[type];\n\n      if (state || wrapper) {\n        visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper);\n      }\n\n      var nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};\n      mergePair(nodeVisitor, visitorType);\n    }\n  }\n\n  return rootVisitor;\n}\n\nfunction wrapWithStateOrWrapper(oldVisitor, state, wrapper) {\n  var newVisitor = {};\n\n  var _loop = function _loop(key) {\n    var fns = oldVisitor[key];\n    if (!Array.isArray(fns)) return \"continue\";\n    fns = fns.map(function (fn) {\n      var newFn = fn;\n\n      if (state) {\n        newFn = function newFn(path) {\n          return fn.call(state, path, state);\n        };\n      }\n\n      if (wrapper) {\n        newFn = wrapper(state.key, key, newFn);\n      }\n\n      return newFn;\n    });\n    newVisitor[key] = fns;\n  };\n\n  for (var key in oldVisitor) {\n    var _ret = _loop(key);\n\n    if (_ret === \"continue\") continue;\n  }\n\n  return newVisitor;\n}\n\nfunction ensureEntranceObjects(obj) {\n  for (var key in obj) {\n    if (shouldIgnoreKey(key)) continue;\n    var fns = obj[key];\n\n    if (typeof fns === \"function\") {\n      obj[key] = {\n        enter: fns\n      };\n    }\n  }\n}\n\nfunction ensureCallbackArrays(obj) {\n  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];\n  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];\n}\n\nfunction wrapCheck(wrapper, fn) {\n  var newFn = function newFn(path) {\n    if (wrapper.checkPath(path)) {\n      return fn.apply(this, arguments);\n    }\n  };\n\n  newFn.toString = function () {\n    return fn.toString();\n  };\n\n  return newFn;\n}\n\nfunction shouldIgnoreKey(key) {\n  if (key[0] === \"_\") return true;\n  if (key === \"enter\" || key === \"exit\" || key === \"shouldSkip\") return true;\n\n  if (key === \"blacklist\" || key === \"noScope\" || key === \"skipKeys\") {\n    return true;\n  }\n\n  return false;\n}\n\nfunction mergePair(dest, src) {\n  for (var key in src) {\n    dest[key] = [].concat(dest[key] || [], src[key]);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}