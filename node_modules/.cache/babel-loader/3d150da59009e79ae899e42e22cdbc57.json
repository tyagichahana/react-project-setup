{"ast":null,"code":"\"use strict\"; // Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar extend = require(\"extend\");\n\nvar node_fetch_1 = require(\"node-fetch\");\n\nvar qs = require(\"querystring\");\n\nvar stream = require(\"stream\");\n\nvar url = require(\"url\");\n\nvar common_1 = require(\"./common\");\n\nvar isbrowser_1 = require(\"./isbrowser\");\n\nvar retry_1 = require(\"./retry\");\n\nvar URL = isbrowser_1.isBrowser() ? window.URL : url.URL; // tslint:disable-next-line variable-name no-any\n\nvar HttpsProxyAgent; // Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\n\nfunction loadProxy() {\n  var proxy = process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy;\n\n  if (proxy) {\n    HttpsProxyAgent = require('https-proxy-agent');\n  }\n\n  return proxy;\n}\n\nloadProxy();\n\nvar Gaxios =\n/*#__PURE__*/\nfunction () {\n  /**\n   * The Gaxios class is responsible for making HTTP requests.\n   * @param defaults The default set of options to be used for this instance.\n   */\n  function Gaxios(defaults) {\n    _classCallCheck(this, Gaxios);\n\n    this.agentCache = new Map();\n    this.defaults = defaults || {};\n  }\n  /**\n   * Perform an HTTP request with the given options.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n\n\n  _createClass(Gaxios, [{\n    key: \"request\",\n    value: function request() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var translatedResponse, res, data, err, _ref, shouldRetry, config;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                opts = this.validateOpts(opts);\n                _context.prev = 1;\n\n                if (!opts.adapter) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 5;\n                return opts.adapter(opts);\n\n              case 5:\n                translatedResponse = _context.sent;\n                _context.next = 15;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return node_fetch_1.default(opts.url, opts);\n\n              case 10:\n                res = _context.sent;\n                _context.next = 13;\n                return this.getResponseData(opts, res);\n\n              case 13:\n                data = _context.sent;\n                translatedResponse = this.translateResponse(opts, res, data);\n\n              case 15:\n                if (opts.validateStatus(translatedResponse.status)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                throw new common_1.GaxiosError(\"Request failed with status code \".concat(translatedResponse.status), opts, translatedResponse);\n\n              case 17:\n                return _context.abrupt(\"return\", translatedResponse);\n\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](1);\n                err = _context.t0;\n                err.config = opts;\n                _context.next = 26;\n                return retry_1.getRetryConfig(_context.t0);\n\n              case 26:\n                _ref = _context.sent;\n                shouldRetry = _ref.shouldRetry;\n                config = _ref.config;\n\n                if (!(shouldRetry && config)) {\n                  _context.next = 32;\n                  break;\n                }\n\n                err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n                return _context.abrupt(\"return\", this.request(err.config));\n\n              case 32:\n                throw err;\n\n              case 33:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 20]]);\n      }));\n    }\n  }, {\n    key: \"getResponseData\",\n    value: function getResponseData(opts, res) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = opts.responseType;\n                _context2.next = _context2.t0 === 'stream' ? 3 : _context2.t0 === 'json' ? 4 : _context2.t0 === 'arraybuffer' ? 9 : _context2.t0 === 'blob' ? 10 : 11;\n                break;\n\n              case 3:\n                return _context2.abrupt(\"return\", res.body);\n\n              case 4:\n                _context2.next = 6;\n                return res.text();\n\n              case 6:\n                data = _context2.sent;\n\n                try {\n                  data = JSON.parse(data);\n                } catch (e) {}\n\n                return _context2.abrupt(\"return\", data);\n\n              case 9:\n                return _context2.abrupt(\"return\", res.arrayBuffer());\n\n              case 10:\n                return _context2.abrupt(\"return\", res.blob());\n\n              case 11:\n                return _context2.abrupt(\"return\", res.text());\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Validate the options, and massage them to match the fetch format.\n     * @param opts The original options passed from the client.\n     */\n\n  }, {\n    key: \"validateOpts\",\n    value: function validateOpts(options) {\n      var opts = extend(true, {}, this.defaults, options);\n\n      if (!opts.url) {\n        throw new Error('URL is required.');\n      } // baseUrl has been deprecated, remove in 2.0\n\n\n      var baseUrl = opts.baseUrl || opts.baseURL;\n\n      if (baseUrl) {\n        opts.url = baseUrl + opts.url;\n      }\n\n      if (typeof options.maxContentLength === 'number') {\n        opts.size = options.maxContentLength;\n      }\n\n      opts.headers = opts.headers || {};\n\n      if (opts.data) {\n        if (this.isReadableStream(opts.data)) {\n          opts.body = opts.data;\n        } else if (typeof opts.data === 'object') {\n          opts.body = JSON.stringify(opts.data);\n          opts.headers['Content-Type'] = 'application/json';\n        } else {\n          opts.body = opts.data;\n        }\n      }\n\n      opts.validateStatus = opts.validateStatus || this.validateStatus;\n      opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n      opts.responseType = opts.responseType || 'json';\n\n      if (!opts.headers['Accept'] && opts.responseType === 'json') {\n        opts.headers['Accept'] = 'application/json';\n      }\n\n      opts.method = opts.method || 'GET';\n\n      if (opts.params) {\n        var parts = new URL(opts.url);\n        parts.search = opts.paramsSerializer(opts.params);\n        opts.url = parts.href;\n      }\n\n      var proxy = loadProxy();\n\n      if (proxy) {\n        if (this.agentCache.has(proxy)) {\n          opts.agent = this.agentCache.get(proxy);\n        } else {\n          opts.agent = new HttpsProxyAgent(proxy);\n          this.agentCache.set(proxy, opts.agent);\n        }\n      }\n\n      return opts;\n    }\n    /**\n     * By default, throw for any non-2xx status code\n     * @param status status code from the HTTP response\n     */\n\n  }, {\n    key: \"validateStatus\",\n    value: function validateStatus(status) {\n      return status >= 200 && status < 300;\n    }\n    /**\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n     * @param params key value pars to encode\n     */\n\n  }, {\n    key: \"paramsSerializer\",\n    value: function paramsSerializer(params) {\n      return qs.stringify(params);\n    }\n  }, {\n    key: \"isReadableStream\",\n    value: function isReadableStream(obj) {\n      return obj instanceof stream.Readable && typeof obj._read === 'function';\n    }\n  }, {\n    key: \"translateResponse\",\n    value: function translateResponse(opts, res, data) {\n      // headers need to be converted from a map to an obj\n      var headers = {};\n      res.headers.forEach(function (value, key) {\n        headers[key] = value;\n      });\n      return {\n        config: opts,\n        data: data,\n        headers: headers,\n        status: res.status,\n        statusText: res.statusText\n      };\n    }\n  }]);\n\n  return Gaxios;\n}();\n\nexports.Gaxios = Gaxios;","map":null,"metadata":{},"sourceType":"script"}