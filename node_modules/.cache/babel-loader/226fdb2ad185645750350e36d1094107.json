{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _includes() {\n  var data = _interopRequireDefault(require(\"lodash/includes\"));\n\n  _includes = function _includes() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _repeat() {\n  var data = _interopRequireDefault(require(\"lodash/repeat\"));\n\n  _repeat = function _repeat() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _renamer = _interopRequireDefault(require(\"./lib/renamer\"));\n\nvar _index = _interopRequireDefault(require(\"../index\"));\n\nfunction _defaults() {\n  var data = _interopRequireDefault(require(\"lodash/defaults\"));\n\n  _defaults = function _defaults() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _binding = _interopRequireDefault(require(\"./binding\"));\n\nfunction _globals() {\n  var data = _interopRequireDefault(require(\"globals\"));\n\n  _globals = function _globals() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  var data = _interopRequireWildcard(require(\"@babel/types\"));\n\n  t = function t() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _cache = require(\"../cache\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction gatherNodeParts(node, parts) {\n  if (t().isModuleDeclaration(node)) {\n    if (node.source) {\n      gatherNodeParts(node.source, parts);\n    } else if (node.specifiers && node.specifiers.length) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = node.specifiers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var specifier = _step.value;\n          gatherNodeParts(specifier, parts);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } else if (node.declaration) {\n      gatherNodeParts(node.declaration, parts);\n    }\n  } else if (t().isModuleSpecifier(node)) {\n    gatherNodeParts(node.local, parts);\n  } else if (t().isMemberExpression(node)) {\n    gatherNodeParts(node.object, parts);\n    gatherNodeParts(node.property, parts);\n  } else if (t().isIdentifier(node)) {\n    parts.push(node.name);\n  } else if (t().isLiteral(node)) {\n    parts.push(node.value);\n  } else if (t().isCallExpression(node)) {\n    gatherNodeParts(node.callee, parts);\n  } else if (t().isObjectExpression(node) || t().isObjectPattern(node)) {\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = node.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var prop = _step2.value;\n        gatherNodeParts(prop.key || prop.argument, parts);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  } else if (t().isPrivateName(node)) {\n    gatherNodeParts(node.id, parts);\n  } else if (t().isThisExpression(node)) {\n    parts.push(\"this\");\n  } else if (t().isSuper(node)) {\n    parts.push(\"super\");\n  }\n}\n\nvar collectorVisitor = {\n  For: function For(path) {\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = t().FOR_INIT_KEYS[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var key = _step3.value;\n        var declar = path.get(key);\n\n        if (declar.isVar()) {\n          var parentScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n          parentScope.registerBinding(\"var\", declar);\n        }\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  },\n  Declaration: function Declaration(path) {\n    if (path.isBlockScoped()) return;\n\n    if (path.isExportDeclaration() && path.get(\"declaration\").isDeclaration()) {\n      return;\n    }\n\n    var parent = path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n  ReferencedIdentifier: function ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n  ForXStatement: function ForXStatement(path, state) {\n    var left = path.get(\"left\");\n\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n  },\n  ExportDeclaration: {\n    exit: function exit(path) {\n      var node = path.node,\n          scope = path.scope;\n      var declar = node.declaration;\n\n      if (t().isClassDeclaration(declar) || t().isFunctionDeclaration(declar)) {\n        var id = declar.id;\n        if (!id) return;\n        var binding = scope.getBinding(id.name);\n        if (binding) binding.reference(path);\n      } else if (t().isVariableDeclaration(declar)) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = declar.declarations[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var decl = _step4.value;\n            var ids = t().getBindingIdentifiers(decl);\n\n            for (var name in ids) {\n              var _binding2 = scope.getBinding(name);\n\n              if (_binding2) _binding2.reference(path);\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n    }\n  },\n  LabeledStatement: function LabeledStatement(path) {\n    path.scope.getProgramParent().addGlobal(path.node);\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n  AssignmentExpression: function AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n  UpdateExpression: function UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n  UnaryExpression: function UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n  BlockScoped: function BlockScoped(path) {\n    var scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n    scope.getBlockParent().registerDeclaration(path);\n  },\n  ClassDeclaration: function ClassDeclaration(path) {\n    var id = path.node.id;\n    if (!id) return;\n    var name = id.name;\n    path.scope.bindings[name] = path.scope.getBinding(name);\n  },\n  Block: function Block(path) {\n    var paths = path.get(\"body\");\n    var _iteratorNormalCompletion5 = true;\n    var _didIteratorError5 = false;\n    var _iteratorError5 = undefined;\n\n    try {\n      for (var _iterator5 = paths[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n        var bodyPath = _step5.value;\n\n        if (bodyPath.isFunctionDeclaration()) {\n          path.scope.getBlockParent().registerDeclaration(bodyPath);\n        }\n      }\n    } catch (err) {\n      _didIteratorError5 = true;\n      _iteratorError5 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n          _iterator5.return();\n        }\n      } finally {\n        if (_didIteratorError5) {\n          throw _iteratorError5;\n        }\n      }\n    }\n  }\n};\nvar uid = 0;\n\nvar Scope =\n/*#__PURE__*/\nfunction () {\n  function Scope(path) {\n    _classCallCheck(this, Scope);\n\n    var node = path.node;\n\n    var cached = _cache.scope.get(node);\n\n    if (cached && cached.path === path) {\n      return cached;\n    }\n\n    _cache.scope.set(node, this);\n\n    this.uid = uid++;\n    this.block = node;\n    this.path = path;\n    this.labels = new Map();\n  }\n\n  _createClass(Scope, [{\n    key: \"traverse\",\n    value: function traverse(node, opts, state) {\n      (0, _index.default)(node, opts, this, state, this.path);\n    }\n  }, {\n    key: \"generateDeclaredUidIdentifier\",\n    value: function generateDeclaredUidIdentifier(name) {\n      var id = this.generateUidIdentifier(name);\n      this.push({\n        id: id\n      });\n      return t().cloneNode(id);\n    }\n  }, {\n    key: \"generateUidIdentifier\",\n    value: function generateUidIdentifier(name) {\n      return t().identifier(this.generateUid(name));\n    }\n  }, {\n    key: \"generateUid\",\n    value: function generateUid() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"temp\";\n      name = t().toIdentifier(name).replace(/^_+/, \"\").replace(/[0-9]+$/g, \"\");\n      var uid;\n      var i = 0;\n\n      do {\n        uid = this._generateUid(name, i);\n        i++;\n      } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));\n\n      var program = this.getProgramParent();\n      program.references[uid] = true;\n      program.uids[uid] = true;\n      return uid;\n    }\n  }, {\n    key: \"_generateUid\",\n    value: function _generateUid(name, i) {\n      var id = name;\n      if (i > 1) id += i;\n      return \"_\".concat(id);\n    }\n  }, {\n    key: \"generateUidBasedOnNode\",\n    value: function generateUidBasedOnNode(parent, defaultName) {\n      var node = parent;\n\n      if (t().isAssignmentExpression(parent)) {\n        node = parent.left;\n      } else if (t().isVariableDeclarator(parent)) {\n        node = parent.id;\n      } else if (t().isObjectProperty(node) || t().isObjectMethod(node)) {\n        node = node.key;\n      }\n\n      var parts = [];\n      gatherNodeParts(node, parts);\n      var id = parts.join(\"$\");\n      id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n      return this.generateUid(id.slice(0, 20));\n    }\n  }, {\n    key: \"generateUidIdentifierBasedOnNode\",\n    value: function generateUidIdentifierBasedOnNode(parent, defaultName) {\n      return t().identifier(this.generateUidBasedOnNode(parent, defaultName));\n    }\n  }, {\n    key: \"isStatic\",\n    value: function isStatic(node) {\n      if (t().isThisExpression(node) || t().isSuper(node)) {\n        return true;\n      }\n\n      if (t().isIdentifier(node)) {\n        var binding = this.getBinding(node.name);\n\n        if (binding) {\n          return binding.constant;\n        } else {\n          return this.hasBinding(node.name);\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeGenerateMemoised\",\n    value: function maybeGenerateMemoised(node, dontPush) {\n      if (this.isStatic(node)) {\n        return null;\n      } else {\n        var id = this.generateUidIdentifierBasedOnNode(node);\n\n        if (!dontPush) {\n          this.push({\n            id: id\n          });\n          return t().cloneNode(id);\n        }\n\n        return id;\n      }\n    }\n  }, {\n    key: \"checkBlockScopedCollisions\",\n    value: function checkBlockScopedCollisions(local, kind, name, id) {\n      if (kind === \"param\") return;\n      if (local.kind === \"local\") return;\n      if (kind === \"hoisted\" && local.kind === \"let\") return;\n      var duplicate = kind === \"let\" || local.kind === \"let\" || local.kind === \"const\" || local.kind === \"module\" || local.kind === \"param\" && (kind === \"let\" || kind === \"const\");\n\n      if (duplicate) {\n        throw this.hub.buildError(id, \"Duplicate declaration \\\"\".concat(name, \"\\\"\"), TypeError);\n      }\n    }\n  }, {\n    key: \"rename\",\n    value: function rename(oldName, newName, block) {\n      var binding = this.getBinding(oldName);\n\n      if (binding) {\n        newName = newName || this.generateUidIdentifier(oldName).name;\n        return new _renamer.default(binding, oldName, newName).rename(block);\n      }\n    }\n  }, {\n    key: \"_renameFromMap\",\n    value: function _renameFromMap(map, oldName, newName, value) {\n      if (map[oldName]) {\n        map[newName] = value;\n        map[oldName] = null;\n      }\n    }\n  }, {\n    key: \"dump\",\n    value: function dump() {\n      var sep = (0, _repeat().default)(\"-\", 60);\n      console.log(sep);\n      var scope = this;\n\n      do {\n        console.log(\"#\", scope.block.type);\n\n        for (var name in scope.bindings) {\n          var binding = scope.bindings[name];\n          console.log(\" -\", name, {\n            constant: binding.constant,\n            references: binding.references,\n            violations: binding.constantViolations.length,\n            kind: binding.kind\n          });\n        }\n      } while (scope = scope.parent);\n\n      console.log(sep);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray(node, i) {\n      if (t().isIdentifier(node)) {\n        var binding = this.getBinding(node.name);\n\n        if (binding && binding.constant && binding.path.isGenericType(\"Array\")) {\n          return node;\n        }\n      }\n\n      if (t().isArrayExpression(node)) {\n        return node;\n      }\n\n      if (t().isIdentifier(node, {\n        name: \"arguments\"\n      })) {\n        return t().callExpression(t().memberExpression(t().memberExpression(t().memberExpression(t().identifier(\"Array\"), t().identifier(\"prototype\")), t().identifier(\"slice\")), t().identifier(\"call\")), [node]);\n      }\n\n      var helperName;\n      var args = [node];\n\n      if (i === true) {\n        helperName = \"toConsumableArray\";\n      } else if (i) {\n        args.push(t().numericLiteral(i));\n        helperName = \"slicedToArray\";\n      } else {\n        helperName = \"toArray\";\n      }\n\n      return t().callExpression(this.hub.addHelper(helperName), args);\n    }\n  }, {\n    key: \"hasLabel\",\n    value: function hasLabel(name) {\n      return !!this.getLabel(name);\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(name) {\n      return this.labels.get(name);\n    }\n  }, {\n    key: \"registerLabel\",\n    value: function registerLabel(path) {\n      this.labels.set(path.node.label.name, path);\n    }\n  }, {\n    key: \"registerDeclaration\",\n    value: function registerDeclaration(path) {\n      if (path.isLabeledStatement()) {\n        this.registerLabel(path);\n      } else if (path.isFunctionDeclaration()) {\n        this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n      } else if (path.isVariableDeclaration()) {\n        var declarations = path.get(\"declarations\");\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = declarations[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var declar = _step6.value;\n            this.registerBinding(path.node.kind, declar);\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n      } else if (path.isClassDeclaration()) {\n        this.registerBinding(\"let\", path);\n      } else if (path.isImportDeclaration()) {\n        var specifiers = path.get(\"specifiers\");\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = specifiers[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var specifier = _step7.value;\n            this.registerBinding(\"module\", specifier);\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n      } else if (path.isExportDeclaration()) {\n        var _declar = path.get(\"declaration\");\n\n        if (_declar.isClassDeclaration() || _declar.isFunctionDeclaration() || _declar.isVariableDeclaration()) {\n          this.registerDeclaration(_declar);\n        }\n      } else {\n        this.registerBinding(\"unknown\", path);\n      }\n    }\n  }, {\n    key: \"buildUndefinedNode\",\n    value: function buildUndefinedNode() {\n      if (this.hasBinding(\"undefined\")) {\n        return t().unaryExpression(\"void\", t().numericLiteral(0), true);\n      } else {\n        return t().identifier(\"undefined\");\n      }\n    }\n  }, {\n    key: \"registerConstantViolation\",\n    value: function registerConstantViolation(path) {\n      var ids = path.getBindingIdentifiers();\n\n      for (var name in ids) {\n        var binding = this.getBinding(name);\n        if (binding) binding.reassign(path);\n      }\n    }\n  }, {\n    key: \"registerBinding\",\n    value: function registerBinding(kind, path) {\n      var bindingPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : path;\n      if (!kind) throw new ReferenceError(\"no `kind`\");\n\n      if (path.isVariableDeclaration()) {\n        var declarators = path.get(\"declarations\");\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = declarators[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var declar = _step8.value;\n            this.registerBinding(kind, declar);\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n\n        return;\n      }\n\n      var parent = this.getProgramParent();\n      var ids = path.getBindingIdentifiers(true);\n\n      for (var name in ids) {\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n          for (var _iterator9 = ids[name][Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n            var id = _step9.value;\n            var local = this.getOwnBinding(name);\n\n            if (local) {\n              if (local.identifier === id) continue;\n              this.checkBlockScopedCollisions(local, kind, name, id);\n            }\n\n            parent.references[name] = true;\n\n            if (local) {\n              this.registerConstantViolation(bindingPath);\n            } else {\n              this.bindings[name] = new _binding.default({\n                identifier: id,\n                scope: this,\n                path: bindingPath,\n                kind: kind\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n              _iterator9.return();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"addGlobal\",\n    value: function addGlobal(node) {\n      this.globals[node.name] = node;\n    }\n  }, {\n    key: \"hasUid\",\n    value: function hasUid(name) {\n      var scope = this;\n\n      do {\n        if (scope.uids[name]) return true;\n      } while (scope = scope.parent);\n\n      return false;\n    }\n  }, {\n    key: \"hasGlobal\",\n    value: function hasGlobal(name) {\n      var scope = this;\n\n      do {\n        if (scope.globals[name]) return true;\n      } while (scope = scope.parent);\n\n      return false;\n    }\n  }, {\n    key: \"hasReference\",\n    value: function hasReference(name) {\n      var scope = this;\n\n      do {\n        if (scope.references[name]) return true;\n      } while (scope = scope.parent);\n\n      return false;\n    }\n  }, {\n    key: \"isPure\",\n    value: function isPure(node, constantsOnly) {\n      if (t().isIdentifier(node)) {\n        var binding = this.getBinding(node.name);\n        if (!binding) return false;\n        if (constantsOnly) return binding.constant;\n        return true;\n      } else if (t().isClass(node)) {\n        if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n          return false;\n        }\n\n        return this.isPure(node.body, constantsOnly);\n      } else if (t().isClassBody(node)) {\n        var _iteratorNormalCompletion10 = true;\n        var _didIteratorError10 = false;\n        var _iteratorError10 = undefined;\n\n        try {\n          for (var _iterator10 = node.body[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n            var method = _step10.value;\n            if (!this.isPure(method, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _didIteratorError10 = true;\n          _iteratorError10 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n              _iterator10.return();\n            }\n          } finally {\n            if (_didIteratorError10) {\n              throw _iteratorError10;\n            }\n          }\n        }\n\n        return true;\n      } else if (t().isBinary(node)) {\n        return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);\n      } else if (t().isArrayExpression(node)) {\n        var _iteratorNormalCompletion11 = true;\n        var _didIteratorError11 = false;\n        var _iteratorError11 = undefined;\n\n        try {\n          for (var _iterator11 = node.elements[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n            var elem = _step11.value;\n            if (!this.isPure(elem, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _didIteratorError11 = true;\n          _iteratorError11 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n              _iterator11.return();\n            }\n          } finally {\n            if (_didIteratorError11) {\n              throw _iteratorError11;\n            }\n          }\n        }\n\n        return true;\n      } else if (t().isObjectExpression(node)) {\n        var _iteratorNormalCompletion12 = true;\n        var _didIteratorError12 = false;\n        var _iteratorError12 = undefined;\n\n        try {\n          for (var _iterator12 = node.properties[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n            var prop = _step12.value;\n            if (!this.isPure(prop, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _didIteratorError12 = true;\n          _iteratorError12 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n              _iterator12.return();\n            }\n          } finally {\n            if (_didIteratorError12) {\n              throw _iteratorError12;\n            }\n          }\n        }\n\n        return true;\n      } else if (t().isClassMethod(node)) {\n        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n        if (node.kind === \"get\" || node.kind === \"set\") return false;\n        return true;\n      } else if (t().isProperty(node)) {\n        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n        return this.isPure(node.value, constantsOnly);\n      } else if (t().isUnaryExpression(node)) {\n        return this.isPure(node.argument, constantsOnly);\n      } else if (t().isTaggedTemplateExpression(node)) {\n        return t().matchesPattern(node.tag, \"String.raw\") && !this.hasBinding(\"String\", true) && this.isPure(node.quasi, constantsOnly);\n      } else if (t().isTemplateLiteral(node)) {\n        var _iteratorNormalCompletion13 = true;\n        var _didIteratorError13 = false;\n        var _iteratorError13 = undefined;\n\n        try {\n          for (var _iterator13 = node.expressions[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n            var expression = _step13.value;\n            if (!this.isPure(expression, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _didIteratorError13 = true;\n          _iteratorError13 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n              _iterator13.return();\n            }\n          } finally {\n            if (_didIteratorError13) {\n              throw _iteratorError13;\n            }\n          }\n        }\n\n        return true;\n      } else {\n        return t().isPureish(node);\n      }\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(key, val) {\n      return this.data[key] = val;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(key) {\n      var scope = this;\n\n      do {\n        var data = scope.data[key];\n        if (data != null) return data;\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"removeData\",\n    value: function removeData(key) {\n      var scope = this;\n\n      do {\n        var data = scope.data[key];\n        if (data != null) scope.data[key] = null;\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      if (!this.references) this.crawl();\n    }\n  }, {\n    key: \"crawl\",\n    value: function crawl() {\n      var path = this.path;\n      this.references = Object.create(null);\n      this.bindings = Object.create(null);\n      this.globals = Object.create(null);\n      this.uids = Object.create(null);\n      this.data = Object.create(null);\n\n      if (path.isLoop()) {\n        var _iteratorNormalCompletion14 = true;\n        var _didIteratorError14 = false;\n        var _iteratorError14 = undefined;\n\n        try {\n          for (var _iterator14 = t().FOR_INIT_KEYS[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n            var key = _step14.value;\n            var node = path.get(key);\n            if (node.isBlockScoped()) this.registerBinding(node.node.kind, node);\n          }\n        } catch (err) {\n          _didIteratorError14 = true;\n          _iteratorError14 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion14 && _iterator14.return != null) {\n              _iterator14.return();\n            }\n          } finally {\n            if (_didIteratorError14) {\n              throw _iteratorError14;\n            }\n          }\n        }\n      }\n\n      if (path.isFunctionExpression() && path.has(\"id\")) {\n        if (!path.get(\"id\").node[t().NOT_LOCAL_BINDING]) {\n          this.registerBinding(\"local\", path.get(\"id\"), path);\n        }\n      }\n\n      if (path.isClassExpression() && path.has(\"id\")) {\n        if (!path.get(\"id\").node[t().NOT_LOCAL_BINDING]) {\n          this.registerBinding(\"local\", path);\n        }\n      }\n\n      if (path.isFunction()) {\n        var params = path.get(\"params\");\n        var _iteratorNormalCompletion15 = true;\n        var _didIteratorError15 = false;\n        var _iteratorError15 = undefined;\n\n        try {\n          for (var _iterator15 = params[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n            var param = _step15.value;\n            this.registerBinding(\"param\", param);\n          }\n        } catch (err) {\n          _didIteratorError15 = true;\n          _iteratorError15 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion15 && _iterator15.return != null) {\n              _iterator15.return();\n            }\n          } finally {\n            if (_didIteratorError15) {\n              throw _iteratorError15;\n            }\n          }\n        }\n      }\n\n      if (path.isCatchClause()) {\n        this.registerBinding(\"let\", path);\n      }\n\n      var parent = this.getProgramParent();\n      if (parent.crawling) return;\n      var state = {\n        references: [],\n        constantViolations: [],\n        assignments: []\n      };\n      this.crawling = true;\n      path.traverse(collectorVisitor, state);\n      this.crawling = false;\n      var _iteratorNormalCompletion16 = true;\n      var _didIteratorError16 = false;\n      var _iteratorError16 = undefined;\n\n      try {\n        for (var _iterator16 = state.assignments[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n          var _path = _step16.value;\n\n          var ids = _path.getBindingIdentifiers();\n\n          var programParent = void 0;\n\n          for (var name in ids) {\n            if (_path.scope.getBinding(name)) continue;\n            programParent = programParent || _path.scope.getProgramParent();\n            programParent.addGlobal(ids[name]);\n          }\n\n          _path.scope.registerConstantViolation(_path);\n        }\n      } catch (err) {\n        _didIteratorError16 = true;\n        _iteratorError16 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion16 && _iterator16.return != null) {\n            _iterator16.return();\n          }\n        } finally {\n          if (_didIteratorError16) {\n            throw _iteratorError16;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion17 = true;\n      var _didIteratorError17 = false;\n      var _iteratorError17 = undefined;\n\n      try {\n        for (var _iterator17 = state.references[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n          var ref = _step17.value;\n          var binding = ref.scope.getBinding(ref.node.name);\n\n          if (binding) {\n            binding.reference(ref);\n          } else {\n            ref.scope.getProgramParent().addGlobal(ref.node);\n          }\n        }\n      } catch (err) {\n        _didIteratorError17 = true;\n        _iteratorError17 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion17 && _iterator17.return != null) {\n            _iterator17.return();\n          }\n        } finally {\n          if (_didIteratorError17) {\n            throw _iteratorError17;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion18 = true;\n      var _didIteratorError18 = false;\n      var _iteratorError18 = undefined;\n\n      try {\n        for (var _iterator18 = state.constantViolations[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n          var _path2 = _step18.value;\n\n          _path2.scope.registerConstantViolation(_path2);\n        }\n      } catch (err) {\n        _didIteratorError18 = true;\n        _iteratorError18 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion18 && _iterator18.return != null) {\n            _iterator18.return();\n          }\n        } finally {\n          if (_didIteratorError18) {\n            throw _iteratorError18;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"push\",\n    value: function push(opts) {\n      var path = this.path;\n\n      if (!path.isBlockStatement() && !path.isProgram()) {\n        path = this.getBlockParent().path;\n      }\n\n      if (path.isSwitchStatement()) {\n        path = (this.getFunctionParent() || this.getProgramParent()).path;\n      }\n\n      if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n        path.ensureBlock();\n        path = path.get(\"body\");\n      }\n\n      var unique = opts.unique;\n      var kind = opts.kind || \"var\";\n      var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n      var dataKey = \"declaration:\".concat(kind, \":\").concat(blockHoist);\n      var declarPath = !unique && path.getData(dataKey);\n\n      if (!declarPath) {\n        var declar = t().variableDeclaration(kind, []);\n        declar._blockHoist = blockHoist;\n\n        var _path$unshiftContaine = path.unshiftContainer(\"body\", [declar]);\n\n        var _path$unshiftContaine2 = _slicedToArray(_path$unshiftContaine, 1);\n\n        declarPath = _path$unshiftContaine2[0];\n        if (!unique) path.setData(dataKey, declarPath);\n      }\n\n      var declarator = t().variableDeclarator(opts.id, opts.init);\n      declarPath.node.declarations.push(declarator);\n      this.registerBinding(kind, declarPath.get(\"declarations\").pop());\n    }\n  }, {\n    key: \"getProgramParent\",\n    value: function getProgramParent() {\n      var scope = this;\n\n      do {\n        if (scope.path.isProgram()) {\n          return scope;\n        }\n      } while (scope = scope.parent);\n\n      throw new Error(\"Couldn't find a Program\");\n    }\n  }, {\n    key: \"getFunctionParent\",\n    value: function getFunctionParent() {\n      var scope = this;\n\n      do {\n        if (scope.path.isFunctionParent()) {\n          return scope;\n        }\n      } while (scope = scope.parent);\n\n      return null;\n    }\n  }, {\n    key: \"getBlockParent\",\n    value: function getBlockParent() {\n      var scope = this;\n\n      do {\n        if (scope.path.isBlockParent()) {\n          return scope;\n        }\n      } while (scope = scope.parent);\n\n      throw new Error(\"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\");\n    }\n  }, {\n    key: \"getAllBindings\",\n    value: function getAllBindings() {\n      var ids = Object.create(null);\n      var scope = this;\n\n      do {\n        (0, _defaults().default)(ids, scope.bindings);\n        scope = scope.parent;\n      } while (scope);\n\n      return ids;\n    }\n  }, {\n    key: \"getAllBindingsOfKind\",\n    value: function getAllBindingsOfKind() {\n      var ids = Object.create(null);\n      var _iteratorNormalCompletion19 = true;\n      var _didIteratorError19 = false;\n      var _iteratorError19 = undefined;\n\n      try {\n        for (var _iterator19 = arguments[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n          var kind = _step19.value;\n          var scope = this;\n\n          do {\n            for (var name in scope.bindings) {\n              var binding = scope.bindings[name];\n              if (binding.kind === kind) ids[name] = binding;\n            }\n\n            scope = scope.parent;\n          } while (scope);\n        }\n      } catch (err) {\n        _didIteratorError19 = true;\n        _iteratorError19 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion19 && _iterator19.return != null) {\n            _iterator19.return();\n          }\n        } finally {\n          if (_didIteratorError19) {\n            throw _iteratorError19;\n          }\n        }\n      }\n\n      return ids;\n    }\n  }, {\n    key: \"bindingIdentifierEquals\",\n    value: function bindingIdentifierEquals(name, node) {\n      return this.getBindingIdentifier(name) === node;\n    }\n  }, {\n    key: \"getBinding\",\n    value: function getBinding(name) {\n      var scope = this;\n\n      do {\n        var binding = scope.getOwnBinding(name);\n        if (binding) return binding;\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"getOwnBinding\",\n    value: function getOwnBinding(name) {\n      return this.bindings[name];\n    }\n  }, {\n    key: \"getBindingIdentifier\",\n    value: function getBindingIdentifier(name) {\n      var info = this.getBinding(name);\n      return info && info.identifier;\n    }\n  }, {\n    key: \"getOwnBindingIdentifier\",\n    value: function getOwnBindingIdentifier(name) {\n      var binding = this.bindings[name];\n      return binding && binding.identifier;\n    }\n  }, {\n    key: \"hasOwnBinding\",\n    value: function hasOwnBinding(name) {\n      return !!this.getOwnBinding(name);\n    }\n  }, {\n    key: \"hasBinding\",\n    value: function hasBinding(name, noGlobals) {\n      if (!name) return false;\n      if (this.hasOwnBinding(name)) return true;\n      if (this.parentHasBinding(name, noGlobals)) return true;\n      if (this.hasUid(name)) return true;\n      if (!noGlobals && (0, _includes().default)(Scope.globals, name)) return true;\n      if (!noGlobals && (0, _includes().default)(Scope.contextVariables, name)) return true;\n      return false;\n    }\n  }, {\n    key: \"parentHasBinding\",\n    value: function parentHasBinding(name, noGlobals) {\n      return this.parent && this.parent.hasBinding(name, noGlobals);\n    }\n  }, {\n    key: \"moveBindingTo\",\n    value: function moveBindingTo(name, scope) {\n      var info = this.getBinding(name);\n\n      if (info) {\n        info.scope.removeOwnBinding(name);\n        info.scope = scope;\n        scope.bindings[name] = info;\n      }\n    }\n  }, {\n    key: \"removeOwnBinding\",\n    value: function removeOwnBinding(name) {\n      delete this.bindings[name];\n    }\n  }, {\n    key: \"removeBinding\",\n    value: function removeBinding(name) {\n      var info = this.getBinding(name);\n\n      if (info) {\n        info.scope.removeOwnBinding(name);\n      }\n\n      var scope = this;\n\n      do {\n        if (scope.uids[name]) {\n          scope.uids[name] = false;\n        }\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var parent = this.path.findParent(function (p) {\n        return p.isScope();\n      });\n      return parent && parent.scope;\n    }\n  }, {\n    key: \"parentBlock\",\n    get: function get() {\n      return this.path.parent;\n    }\n  }, {\n    key: \"hub\",\n    get: function get() {\n      return this.path.hub;\n    }\n  }]);\n\n  return Scope;\n}();\n\nexports.default = Scope;\nScope.globals = Object.keys(_globals().default.builtin);\nScope.contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];","map":null,"metadata":{},"sourceType":"script"}