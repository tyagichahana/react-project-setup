{"ast":null,"code":"import _objectSpread from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chahanatyagi/Work/cm-frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chahanatyagi/Work/cm-frontend/src/pages/InAppCampaign/Steps/Step4.js\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport history from '@/utils/history';\nimport connectComponent from '@/connect';\nimport WrapComponents from '@/components/wrapper';\nimport { ColoredButtons, TransparentButtons } from '@/components/button';\nimport { SmallHeading } from '@/components/headings';\nimport { Radio } from '@/components/radio';\nimport Stepper from '@/components/stepper';\nimport Loader from '@/components/loader';\nimport Alert from '@/components/alert';\nimport CreateSegementation from '../../Segmentation/createSegment';\nimport { getParentDetails } from '@/actions/CreateCampaign/PnCampaign';\nimport { UpdateCampaignBulk } from '@/actions/CreateCampaign/PnCampaign';\nimport { UploadContent } from '@/actions/utils';\nimport CSVIcon from \"@/assets/images/csv-icon.svg\";\n\nvar StepFour =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StepFour, _Component);\n\n  function StepFour() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StepFour);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StepFour)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      parentID: '',\n      steps: ['Channel', 'Message', 'Scheduling', 'Segmentation', 'Overview'],\n      uploadCsv: true,\n      fileUploaded: false,\n      createSegment: false,\n      userFilePath: '',\n      error: false,\n      errorMessage: '',\n      targetUsers: 0,\n      filePreview: null\n    };\n\n    _this.getUserFilePath = function () {\n      var data = _this.props.CreateCampaign.data;\n\n      _this.setState({\n        filePreview: _this.getFileName(data)\n      });\n    };\n\n    _this.getFileName = function (campaign) {\n      var userFilePath = _.get(campaign, '[0].userFilePath');\n\n      if (userFilePath) {\n        var lindex = userFilePath.lastIndexOf('/') + 1;\n        return {\n          name: userFilePath.substr(lindex),\n          file: userFilePath\n        };\n      }\n\n      return null;\n    };\n\n    _this.handleFileChange =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var files, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                files = e.target.files;\n\n                if (!files.length) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return UploadContent(files[0], 'user_segment');\n\n              case 4:\n                res = _context.sent;\n\n                if (res) {\n                  _this.setState({\n                    fileUploaded: true,\n                    userFilePath: res.s3url,\n                    targetUsers: res.targetUsers,\n                    filePreview: {\n                      name: files[0].name,\n                      file: res.s3url\n                    }\n                  });\n                }\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(StepFour, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var parent_id;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                parent_id = this.props.match.params.parent_id;\n                parent_id = parseInt(parent_id, 10);\n                this.setState({\n                  parentID: parent_id\n                });\n                _context2.next = 5;\n                return getParentDetails(parent_id);\n\n              case 5:\n                this.getUserFilePath();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"handleInputFields\",\n    value: function handleInputFields(key, value) {\n      if (!value) {\n        this.setState(_defineProperty({}, key, value));\n      } else {\n        this.setState(_defineProperty({}, key, value));\n      }\n    }\n  }, {\n    key: \"handleContinue\",\n    value: function handleContinue() {\n      var data = this.props.CreateCampaign.data;\n      var _this$state = this.state,\n          userFilePath = _this$state.userFilePath,\n          fileUploaded = _this$state.fileUploaded,\n          campaignId = _this$state.campaignId,\n          targetUsers = _this$state.targetUsers,\n          filePreview = _this$state.filePreview,\n          parentID = _this$state.parentID,\n          createSegment = _this$state.createSegment;\n      var hasError = false;\n\n      if (!fileUploaded && filePreview) {\n        return history.push(\"/in-app/step-5/\".concat(campaignId));\n      }\n\n      if (!targetUsers) {\n        this.setState({\n          error: true,\n          errorMessage: 'Error: file is empty.'\n        });\n        hasError = true;\n      }\n\n      if (createSegment) {\n        this.setState({\n          error: true,\n          errorMessage: 'Please upload user file containing user information'\n        });\n        hasError = true;\n      }\n\n      if (!fileUploaded) {\n        this.setState({\n          error: true,\n          errorMessage: 'Please upload user file containing user information'\n        });\n        hasError = true;\n      }\n\n      if (!hasError) {\n        var requests = [];\n        var next = \"/in-app/step-5/\".concat(parentID);\n\n        if (_.isArray(data)) {\n          _.forEach(data, function (part) {\n            requests.push(_objectSpread({}, _.assign({}, part, {\n              userFilePath: userFilePath\n            })));\n          });\n        }\n\n        UpdateCampaignBulk(requests, next);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          steps = _this$state2.steps,\n          uploadCsv = _this$state2.uploadCsv,\n          createSegment = _this$state2.createSegment,\n          fileUploaded = _this$state2.fileUploaded,\n          error = _this$state2.error,\n          targetUsers = _this$state2.targetUsers,\n          errorMessage = _this$state2.errorMessage,\n          filePreview = _this$state2.filePreview;\n      var CreateCampaign = this.props.CreateCampaign;\n\n      if (CreateCampaign.loading) {\n        return React.createElement(Loader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(WrapComponents, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(Stepper, {\n        steps: steps,\n        activeStep: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }), CreateCampaign.error && React.createElement(Alert, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Error: \", CreateCampaign.error), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"section \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(SmallHeading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"Target Audience\"), React.createElement(Radio, {\n        checked: uploadCsv,\n        onChange: function onChange() {\n          return _this2.setState({\n            uploadCsv: !uploadCsv,\n            createSegment: !createSegment\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Upload CSV\"), React.createElement(Radio, {\n        checked: createSegment,\n        onChange: function onChange() {\n          return _this2.setState({\n            uploadCsv: !uploadCsv,\n            createSegment: !createSegment\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Create Segment\"), createSegment && React.createElement(CreateSegementation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), uploadCsv && React.createElement(\"div\", {\n        className: \"section mrgn-top-15\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"upload-file-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(SmallHeading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"Upload CSV file\"), React.createElement(\"label\", {\n        htmlFor: \"uploadFile\",\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        id: \"uploadFile\",\n        onChange: this.handleFileChange,\n        accept: \".csv\",\n        className: \"upload-file\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }))), fileUploaded && React.createElement(React.Fragment, null, React.createElement(Alert, {\n        className: \"success mrgn-top-15\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"File has been uploaded successfully\"), React.createElement(SmallHeading, {\n        className: \"success mrgn-top-15\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }), \"Number of users in files : \", targetUsers), filePreview && React.createElement(\"a\", {\n        className: \"file-uploaded\",\n        href: filePreview.file,\n        target: \"_blank\",\n        rel: \"noopener nofollow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"file-icon\",\n        src: CSVIcon,\n        alt: \"csv icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"file-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, filePreview.name)))), error && React.createElement(Alert, {\n        onClose: function onClose() {\n          return _this2.setState({\n            error: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, errorMessage), React.createElement(ColoredButtons, {\n        className: \"float\",\n        onClick: function onClick() {\n          _this2.handleContinue();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"Continue\"), React.createElement(TransparentButtons, {\n        onClick: function onClick() {\n          return _this2.props.history.goBack();\n        },\n        className: \"float grey-border\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, \"Go Back\"))));\n    }\n  }]);\n\n  return StepFour;\n}(Component);\n\nexport default connectComponent(StepFour);","map":{"version":3,"sources":["/Users/chahanatyagi/Work/cm-frontend/src/pages/InAppCampaign/Steps/Step4.js"],"names":["React","Component","_","history","connectComponent","WrapComponents","ColoredButtons","TransparentButtons","SmallHeading","Radio","Stepper","Loader","Alert","CreateSegementation","getParentDetails","UpdateCampaignBulk","UploadContent","StepFour","state","parentID","steps","uploadCsv","fileUploaded","createSegment","userFilePath","error","errorMessage","targetUsers","filePreview","getUserFilePath","data","props","CreateCampaign","setState","getFileName","campaign","get","lindex","lastIndexOf","name","substr","file","handleFileChange","e","files","target","length","res","s3url","parent_id","match","params","parseInt","key","value","campaignId","hasError","push","requests","next","isArray","forEach","part","assign","loading","CSVIcon","handleContinue","goBack"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport _ from 'lodash'\nimport history from '@/utils/history'\nimport connectComponent from '@/connect'\nimport WrapComponents from '@/components/wrapper'\nimport { ColoredButtons, TransparentButtons } from '@/components/button'\nimport { SmallHeading } from '@/components/headings'\nimport { Radio } from '@/components/radio'\nimport Stepper from '@/components/stepper'\nimport Loader from '@/components/loader'\nimport Alert from '@/components/alert'\nimport CreateSegementation from '../../Segmentation/createSegment'\nimport { getParentDetails } from '@/actions/CreateCampaign/PnCampaign'\nimport { UpdateCampaignBulk } from '@/actions/CreateCampaign/PnCampaign'\nimport { UploadContent } from '@/actions/utils'\nimport CSVIcon from '@/assets/images/csv-icon.svg'\n\nclass StepFour extends Component {\n    state = {\n        parentID: '',\n        steps: ['Channel', 'Message', 'Scheduling', 'Segmentation', 'Overview'],\n        uploadCsv: true,\n        fileUploaded: false,\n        createSegment: false,\n        userFilePath: '',\n        error: false,\n        errorMessage: '',\n        targetUsers: 0,\n        filePreview: null,\n    }\n\n    async componentWillMount() {\n        let {\n            params: { parent_id },\n        } = this.props.match\n        parent_id = parseInt(parent_id, 10)\n        this.setState({\n            parentID: parent_id,\n        })\n        await getParentDetails(parent_id)\n        this.getUserFilePath()\n    }\n\n    getUserFilePath = () => {\n        const {\n            CreateCampaign: { data },\n        } = this.props\n        this.setState({\n            filePreview: this.getFileName(data),\n        })\n    }\n\n    getFileName = campaign => {\n        const userFilePath = _.get(campaign, '[0].userFilePath')\n        if (userFilePath) {\n            const lindex = userFilePath.lastIndexOf('/') + 1\n            return {\n                name: userFilePath.substr(lindex),\n                file: userFilePath,\n            }\n        }\n        return null\n    }\n\n    handleInputFields(key, value) {\n        if (!value) {\n            this.setState({\n                [key]: value,\n            })\n        } else {\n            this.setState({\n                [key]: value,\n            })\n        }\n    }\n\n    handleFileChange = async e => {\n        const { files } = e.target\n        if (files.length) {\n            const res = await UploadContent(files[0], 'user_segment')\n            if (res) {\n                this.setState({\n                    fileUploaded: true,\n                    userFilePath: res.s3url,\n                    targetUsers: res.targetUsers,\n                    filePreview: {\n                        name: files[0].name,\n                        file: res.s3url,\n                    },\n                })\n            }\n        }\n    }\n\n    handleContinue() {\n        const { data } = this.props.CreateCampaign\n        const {\n            userFilePath,\n            fileUploaded,\n            campaignId,\n            targetUsers,\n            filePreview,\n            parentID,\n            createSegment,\n        } = this.state\n        let hasError = false\n\n        if (!fileUploaded && filePreview) {\n            return history.push(`/in-app/step-5/${campaignId}`)\n        }\n\n        if (!targetUsers) {\n            this.setState({\n                error: true,\n                errorMessage: 'Error: file is empty.',\n            })\n            hasError = true\n        }\n        if (createSegment) {\n            this.setState({\n                error: true,\n                errorMessage: 'Please upload user file containing user information',\n            })\n            hasError = true\n        }\n\n        if (!fileUploaded) {\n            this.setState({\n                error: true,\n                errorMessage: 'Please upload user file containing user information',\n            })\n            hasError = true\n        }\n\n        if (!hasError) {\n            const requests = []\n            const next = `/in-app/step-5/${parentID}`\n            if (_.isArray(data)) {\n                _.forEach(data, part => {\n                    requests.push({\n                        ..._.assign({}, part, { userFilePath }),\n                    })\n                })\n            }\n            UpdateCampaignBulk(requests, next)\n        }\n    }\n\n    render() {\n        const {\n            steps,\n            uploadCsv,\n            createSegment,\n            fileUploaded,\n            error,\n            targetUsers,\n            errorMessage,\n            filePreview,\n        } = this.state\n        const { CreateCampaign } = this.props\n\n        if (CreateCampaign.loading) {\n            return <Loader />\n        }\n\n        return (\n            <WrapComponents>\n                <Stepper steps={steps} activeStep={3} />\n                {CreateCampaign.error && <Alert>Error: {CreateCampaign.error}</Alert>}\n                <div>\n                    <div className=\"section-left\">\n                        <div className=\"section \">\n                            <SmallHeading>Target Audience</SmallHeading>\n                            <Radio\n                                checked={uploadCsv}\n                                onChange={() =>\n                                    this.setState({\n                                        uploadCsv: !uploadCsv,\n                                        createSegment: !createSegment,\n                                    })\n                                }\n                            >\n                                Upload CSV\n                            </Radio>\n                            <Radio\n                                checked={createSegment}\n                                onChange={() =>\n                                    this.setState({\n                                        uploadCsv: !uploadCsv,\n                                        createSegment: !createSegment,\n                                    })\n                                }\n                            >\n                                Create Segment\n                            </Radio>\n                            {createSegment && <CreateSegementation />}\n                            {uploadCsv && (\n                                <div className=\"section mrgn-top-15\">\n                                    <div className=\"upload-file-section\">\n                                        <SmallHeading>Upload CSV file</SmallHeading>\n                                        <label htmlFor=\"uploadFile\" className=\"\">\n                                            <input\n                                                type=\"file\"\n                                                id=\"uploadFile\"\n                                                onChange={this.handleFileChange}\n                                                accept=\".csv\"\n                                                className=\"upload-file\"\n                                            />\n                                        </label>\n                                    </div>\n                                    {fileUploaded && (\n                                        <>\n                                            <Alert className=\"success mrgn-top-15\">\n                                                File has been uploaded successfully\n                                            </Alert>\n                                            <SmallHeading className=\"success mrgn-top-15\" />\n                                            Number of users in files : {targetUsers}\n                                        </>\n                                    )}\n                                    {filePreview && (\n                                        <a\n                                            className=\"file-uploaded\"\n                                            href={filePreview.file}\n                                            target=\"_blank\"\n                                            rel=\"noopener nofollow\"\n                                        >\n                                            <img\n                                                className=\"file-icon\"\n                                                src={CSVIcon}\n                                                alt=\"csv icon\"\n                                            />\n                                            <div className=\"file-name\">{filePreview.name}</div>\n                                        </a>\n                                    )}\n                                </div>\n                            )}\n                        </div>\n                        {error && (\n                            <Alert onClose={() => this.setState({ error: false })}>\n                                {errorMessage}\n                            </Alert>\n                        )}\n\n                        <ColoredButtons\n                            className=\"float\"\n                            onClick={() => {\n                                this.handleContinue()\n                            }}\n                        >\n                            Continue\n                        </ColoredButtons>\n                        <TransparentButtons\n                            onClick={() => this.props.history.goBack()}\n                            className=\"float grey-border\"\n                        >\n                            Go Back\n                        </TransparentButtons>\n                    </div>\n                </div>\n            </WrapComponents>\n        )\n    }\n}\n\nexport default connectComponent(StepFour)\n"]},"metadata":{},"sourceType":"module"}